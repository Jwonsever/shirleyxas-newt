#!/bin/bash

set -e
set -u

################################################################################
# Environment variable check.  These should be set in the makefile.

if [[ -z $MACPORTS ]]; then
  echo "Error: environment variable MACPORTS does not exist"
  echo "I hope you are running this script from the makefile."
  exit 42
fi

if [[ -z $PLATYPUS ]]; then
  echo "Error: environment variable PLATYPUS does not exist"
  echo "I hope you are running this script from the makefile."
  exit 42
fi

################################################################################
# A convenience function.

function checkfile() {
  if [[ ! -f $1 ]]; then
    echo "Error: file $1 does not exist"
    exit 69
  fi
}

################################################################################

# $MACPORTS with slashes escaped.
MACPORTS1=$( echo $MACPORTS | sed 's/\//\\\//g' )

rm -rf gdis.app

checkfile gdis
checkfile gdis.elements
checkfile gdis.manual
checkfile gdis.library
checkfile GDIS.icns
checkfile gdis.app.template/Contents/Resources/script

echo "Running Platypus..."
$PLATYPUS -a GDIS -f gdis -f gdis.elements -f gdis.manual -f gdis.library -f sggc.jar -f bcprov-jdk15-140.jar -f swiss-proxy-knife.jar -t python -o None -i GDIS.icns -V 0.90 -u "Sean Fleming" -I "org.sean.gdis" -D gdis.app.template/Contents/Resources/script gdis.app
if [[ ! -f gdis.app/Contents/Resources/gdis ]]; then
  echo "Error: Platypus failed."
  exit 1
else 
  echo "done."
fi

# Fix in case script is not executable after above step.
if [[ ! -x gdis.app/Contents/Resources/script ]]; then
  chmod a+x gdis.app/Contents/Resources/script
fi

# Workaround for platypus icon copy bug
if [[ ! -f gdis.app/Contents/Resources/GDIS.icns ]]; then
  cp GDIS.icns gdis.app/Contents/Resources
  sed -i "" 's/appIcon.icns/GDIS.icns/' gdis.app/Contents/Info.plist
fi

mkdir -p gdis.app/Contents/libs

echo "Copying GTK2..."
GTK2VERS=2.10.0
mkdir -p gdis.app/Contents/libs/gtk-2.0/$GTK2VERS/engines
cp $MACPORTS/lib/gtk-2.0/$GTK2VERS/engines/libpixmap.so gdis.app/Contents/libs/gtk-2.0/$GTK2VERS/engines

#echo "Copying pango..."
#mkdir -p gdis.app/Contents/Frameworks/pango
#PANGO=$MACPORTS/lib/pango/1.6.0/modules
#cp -Rp $PANGO/* gdis.app/Contents/Frameworks/pango

echo "Fixing library dependencies in gdis..."
#dylibbundler -b -x ./gdis.app/Contents/Resources/gdis -x ./gdis.app/Contents/libs/gtk-2.0/$GTK2VERS/loaders/libpixbufloader-xpm.so -i /usr/X11/lib -i /usr/lib -d ./gdis.app/Contents/libs -p @executable_path/../libs
dylibbundler -b -x ./gdis.app/Contents/Resources/gdis -x ./gdis.app/Contents/libs/gtk-2.0/$GTK2VERS/engines/libpixmap.so -i /usr/X11/lib -i /usr/lib -d ./gdis.app/Contents/libs -p @executable_path/../libs
#dylibbundler -b -x ./gdis.app/Contents/Resources/gdis -x gdis.app/Contents/Frameworks/pango/pango-basic-fc.so -x gdis.app/Contents/Frameworks/pango/pango-basic-atsui.so -x ./gdis.app/Contents/libs/gtk-2.0/$GTK2VERS/engines/libpixmap.so -i /usr/X11/lib -i /usr/lib -d ./gdis.app/Contents/libs -p @executable_path/../libs

#Got to copy pango.modules to Resources/etc/pango and put in $CWD/lib/pango/...
#Also copy pango.aliases there too.
mkdir -p gdis.app/Contents/Resources/etc/pango
checkfile $MACPORTS/etc/pango/pangox.aliases
cp $MACPORTS/etc/pango/pangox.aliases gdis.app/Contents/Resources/etc/pango/pangox.aliases

#pango-querymodules $PANGO | grep -v "^#" | perl -p -e "s/^\"\(.*\)\"/\"\\$\{\CWD}\/..\/Frameworks\/pango\/pango-basic-fc.so\"/gi" | sed -E "s/^([^ ]+)/\"\1\"/" > gdis.app/Contents/Resources/etc/pango/pango.modules
pango-querymodules > gdis.app/Contents/Resources/etc/pango/pango.modules

mkdir -p gdis.app/Contents/Resources/etc/gtk-2.0
#gtk-query-immodules-2.0 | sed "s/$MACPORTS1\/lib/\$\{CWD\}\/..\/Frameworks/" | grep -v "^#" > gdis.app/Contents/Resources/etc/gtk-2.0/gtk.immodules
gtk-query-immodules-2.0 | perl -p -e "s/$MACPORTS1\/lib/\\$\{\CWD}\/..\/Frameworks/gi" | grep -v "^#" > gdis.app/Contents/Resources/etc/gtk-2.0/gtk.immodules

# Get rid of fink dependencies out of libraries too.
echo "Fixing inter-library dependencies..."
for file in `find gdis.app/Contents/libs -name "*.dylib" -or -name "*.so"`; do
  echo "  processing $file"
  newlib=$( echo "$file" | sed 's/^.*\//\@executable_path\/..\/libs\//' )
  install_name_tool -id $newlib $file
  for lib in `otool -L $file | grep -i "$MACPORTS"` ; do
    if [[ -n $( echo $lib | grep -i $MACPORTS ) ]]; then
      newlib=$( echo "$lib" | sed 's/^.*\//\@executable_path\/..\/libs\//' )
      install_name_tool -change $lib $newlib $file
    fi
  done
done

gdk-pixbuf-query-loaders | perl -p -e "s/$MACPORTS1\/lib/\\$\{\CWD}\/..\/Frameworks/gi"> gdis.app/Contents/Resources/gdk-pixbuf.loaders
#gdk-pixbuf-query-loaders | sed "s/$MACPORTS1\/lib/\$\{CWD\}\/..\/Frameworks/"> gdis.app/Contents/Resources/gdk-pixbuf.loaders

# Final check that we've sorted out all the Fink dependencies.
echo "Just checking sure we got all the Fink dependencies sorted..."
for file in `find gdis.app/Contents -name "*.dylib" -or -name "*.so"`; do
  if [[ -n `otool -L $file | grep -i "$MACPORTS"` ]]; then
    echo "$file still has a MACPORTS depenency"
  fi
done
if [[ -n `otool -L gdis.app/Contents/Resources/gdis | grep -i "$MACPORTS"` ]]; then
  echo "gdis.app/Contents/Resources/gdis still has a MACPORTS depenency"
fi

