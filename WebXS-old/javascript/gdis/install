#! /usr/bin/perl

# --- usage notes
#     ./install      - run with prompts
#     ./install all  - compile all possiblities automatically
#     ./install test - compile all possiblities automatically and update buildstamp on success

use File::Copy;

# --- config
$logfile = "install.log";
$makefile = "makefile";
$use_gui=0;
$use_grisu=0;

# -- experimental
$static=0;
$use_java=0;
$use_python=0;

$wsdl2h = "wsdl2h";
$soapcpp2 = "soapcpp2";
$dest = "./";
$executable = "gdis";
$jdk = $ENV{'JDK_HOME'};

# --- disable buffering so prints are flushed even without "\n"
$|=1;

# --- redirect errors
open(STDERR, ">$logfile");

# TODO - print help on where to get if not installed?
&check_program("pkg-config") || die;

if ($use_python)
  {
  print "Checking for python development...\n";
  &check_program("python-config") || die;
  }

# pre-checks os / files (eg pkg-config) / libs
$osmakefile = &check_os();

# --- compile choices

if ($ARGV[0] eq "test" || $ARGV[0] eq "all")
  {

  if ($ARGV[0] eq "test")
    {

#open(INP, "date '+%d-%b-%Y'|");
open(INP, "date |");
$date = <INP>;
$date =~ s/\n//;
close(INP);
print "Setting build stamp: $date\n";

# hack the gdis header file to include current date
# NB: keeping this change implies a successfull test of all possible builds
    open(INP, "gdis.h") || die "Can't open gdis.h\n";
    open(OUT, ">tmp.h") || die "Can't open tmp.h\n";
    while(<INP>)
      {
      if (/BUILDSTAMP/)
        {
        print OUT "#define BUILDSTAMP \"$date\"\n";
        }
      else
        {
        print OUT;
        }
      }
    close INP;
    close OUT;
    copy("tmp.h", "gdis.h");
    }

# --- compile all possibilities (useful test)
  print "\nCompiling commandline client.\n";
  $use_gui = 0;
  $use_grisu = 0;
  $executable = "gdis1";
  $dest = "./";
  &compile_gdis();

  print "\nCompiling commandline client with grisu web service support.\n";
  $use_gui = 0;
  $use_grisu = 1;
  $executable = "gdis2";
  $dest = "./";
  &compile_gdis();

  print "\nCompiling graphical client.\n";
  $use_gui = 1;
  $use_grisu = 0;
  $executable = "gdis3";
  $dest = "./";
  &compile_gdis();

  print "\nCompiling graphical client with grisu web service support.\n";
  $use_gui = 1;
  $use_grisu = 1;
  $executable = "gdis4";
  $dest = "./";
  &compile_gdis();

  }
else
  {
# --- get compile preferences from user
  &user_prompt();
  &compile_gdis();
  }

close(STDERR);
exit;

# --- subroutines
# --- compile a particular configuration

sub compile_gdis
{

print ("Checking pre-requisite packages.\n");

# TODO - print help on where to get if not installed?
&check_library("gtk+-2.0") || die;
if ($use_gui)
  {
  &check_library("gtkglext-1.0") || die;
  }
if ($use_grisu)
  {
# skipping gsoap lib inclusion, and compiling stdsoap2 directly
# due to problems compiling it on windows
# NB: care must be taken not to mix stubs built with
# different versions of wsdl2h/soapcpp2
#  if ($osmakefile ne "makefile.win32")
#    {
#    &check_library("gsoap") || die;
#    &check_library("gsoapssl") || die;
#    }

  &check_library("libssl") || die;

  if (-e "soapClient.c")
    {
print "Using pre-generated soap stubs.\n";
    }
  else
    {
print "Generating soap stubs ...\n";
    &setup_soap_stubs() || die;
    }
  }

# allow editing of make/install options
# TODO - if cant open - attempt to open in current directory
&build_makefile($osmakefile);

# clean the build area
unlink <*.o>;
unlink $executable;

print "Compiling [$executable] ... ";

# perform make
if ($osmakefile eq "makefile.win32")
  {
  $make = "mingw32-make";
  }
else
  {
  $make = "make -f $makefile >> $logfile";
  }

if (system($make) != 0)
  {
  print "[failed] check $logfile\n";
  return;
  }
else
  {
  print "[done]\n";
  }

# perform install / strip 
# copy gdis exec + manual etc etc to install location
# dont install if dest is ./
# TODO - create if $dest doesn't exist.
if (length($dest) > 2)
  {
  print "Installing $executable in: [$dest]\n";

# FIXME - make this more portable
#  system("strip gdis");

# requires use File::Copy;
  copy($executable, $dest) || die "Cannot copy $executable.\n";
  copy("gdis.elements", $dest) || die "Cannot copy gdis.elements.\n";
  copy("gdis.library", $dest) || die "Cannot copy gdis.library.\n";
  copy("gdis.manual", $dest) || die "Cannot copy gdis.manual.\n";

#  system("cp gdis $dest");
#  system("cp gdis.elements $dest");
#  system("cp gdis.library $dest");
#  system("cp gdis.manual $dest");
  }
}

# --- ask the user what type of package to compile

sub user_prompt
{
print "GDIS Install options\n\n";
print "1. Standard GUI package (default)\n";
print "2. GUI package with web services\n";
print "3. Commandline only\n";
print "4. Commandline with web services\n\n";

do
  {
  $repeat=0;
  print "Choice: ";
  $_ = <>;

# if enter pressed - assume option 1
  if ($_ eq "\n")
    {
    $use_gui=1;
    $use_grisu=0;
    }
  elsif ($_ eq "1\n")
    {
    $use_gui=1;
    $use_grisu=0;
    }
  elsif ($_ eq "2\n")
    {
    $use_gui=1;
    $use_grisu=1;
    }
  elsif ($_ eq "3\n")
    {
    $use_gui=0;
    $use_grisu=0;
    }
  elsif ($_ eq "4\n")
    {
    $use_gui=0;
    $use_grisu=1;
    }
  else
    {
    print "Invalid option.\n";
    $repeat=1;
    }
  }
while ($repeat);

# print current options + any warnings etc
do
  {
  print "GDIS Install location: ";
  $_ = <>;
  chomp;

# use current directory if enter pressed
  if ($_ eq "")
    {
    $_ = ".";
    }
  }
while (&check_install($_));
$dest = $_."/";
}

# --- returns the os specific makefile
sub check_os
{
$os = "makefile.linux";

open(OUT, "uname -a |");

while (<OUT>)
  {
  if (/Linux/)
    {
    $os = "makefile.linux";
    }
  if (/Darwin Kernel/)
    {
    $os = "makefile.osx";
    }
  if (/windows/)
    {
    $os = "makefile.win32";
    }
  }

close(OUT);

return $os;
}

# -- checks is directory is a valid install location
sub check_install
{
print "$_[0] : ";
stat($_[0]);

if (!-e _)
  {
  print "does not exist.\n";
  return(1);
  }
if (!-d _)
  {
  print "is not a directory.\n";
  return(1);
  }
if (!-w _)
  {
  print "is not writable by you.\n";
  return(1);
  }

print " [ok]\n";

return(0);
}

# -- checks if argument string is a valid executable
sub check_program
{
$ret = system($_[0]);

if ($ret == -1)
  {
  print "Required program $_[0] was not found.\n";
  return(0);
  }

return(1);
}

# -- primitive for pkg-config checking
sub check_library
{
printf "%-20s  ",$_[0];
if (system("pkg-config --exists $_[0]"))
  {
  print "[not found]\n";
  return(0);
  }
else
  {
  print "[ok]\n";
  }
return(1);
}

# NEW - generate C client stubs from grisu wsdl
sub setup_soap_stubs()
{

# TODO - get this thing to download the WSDL (SSL issues)
#system("wsdl2h -c -x -o grisu_ws.h grisu.wsdl") || die "Can't process WSDL.\n";
#system("soapcpp2 -L -x -C -c grisu_ws.h") || die "Can't generate C client stubs.\n";
# I think wsdl2h sometimes complains - still works - but we can't use || die
system("$wsdl2h -c -o grisu_ws.h grisu.wsdl");

# --- CUTTING EDGE
&hack_header();

# CURRENT - (-2) generate soap 1.2 bindings (needed for MTOM?)
# CURRENT - (-2) breaks everything (seems to be an xfire issue)
system("$soapcpp2 -1 -L -x -C -c grisu_ws.h");

# hack the soap header to contain authentication tokens
open(INP, "soapStub.h") || die "Can't open soapStub.h\n";
open(OUT, ">new_soapStub.h") || die "Can't open temporary header file\n";
while(<INP>)
  {
# search for soap header struct
  if (/struct SOAP_ENV__Header/)
    {
# search for closing brace
    do
      {
      print OUT;
      $_ = <INP>;
      }
    while (!/};/);
# insert authentication fields
    print OUT "/* GDIS insert */\n";
    print OUT "char *username;\n";
    print OUT "char *password;\n";
    print OUT "char *myproxyserver;\n";
    print OUT "char *myproxyport;\n";
    }
  print OUT;
  }
close INP;
close OUT;
rename("new_soapStub.h", "soapStub.h") || die "Can't rename soapStub.h";

# hack the soap header serializer to pass authentication tokens
open(INP, "soapC.c") || die "Can't open soapC.c\n";
open(OUT, ">new_soapC.c") || die "Can't open temporary C file\n";

while(<INP>)
  {
  if (/soap_out_SOAP_ENV__Header\(struct/)
    {
# search for closing element
    do
      {
      print OUT;
      $_ = <INP>;
      }
    while (!/soap_element_end_out/);
# insert authentication fields
    print OUT "\n/* GDIS insert */\n";
    print OUT "soap_element_begin_out(soap, \"ns1:AuthenticationToken\", 0, NULL);\n";
    print OUT "soap_out_string(soap, \"ns1:Username\", 1, &(a->username), \"\");\n";
    print OUT "soap_out_string(soap, \"ns1:Password\", 2, &(a->password), \"\");\n";
    print OUT "soap_out_string(soap, \"ns1:MyProxyServer\", 3, &(a->myproxyserver), \"\");\n";
    print OUT "soap_out_string(soap, \"ns1:MyProxyPort\", 4, &(a->myproxyport), \"\");\n";
    print OUT "soap_element_end_out(soap, \"ns1:AuthenticationToken\");\n\n";
    }
  print OUT;
  }

close INP;
close OUT;
rename("new_soapC.c", "soapC.c") || die "Can't rename soapC.c\n";

return(1);
}

# CURRENT - hack the header to try and cope with MTOM
sub hack_header
{
open(INP, "grisu_ws.h") || die "Can't open grisu_ws.h\n";
open(OUT, ">new_grisu_ws.h") || die "Can't open temporary header file\n";

# --- this works, but not very portable
#print OUT "#import \"xop.h\"\n";
#print OUT "#import \"xmlmime.h\"\n";

# --- experimenting
print OUT "//gsoap xop schema import: http://www.w3.org/2004/08/xop/include\n";
print OUT "struct _xop__Include\n{\n";
print OUT "unsigned char *__ptr;\n";
print OUT "int __size;\n";
print OUT "char *id;\n";
print OUT "char *type;\n";
print OUT "char *options;\n";
print OUT "};\n";
print OUT "typedef struct _xop__Include _xop__Include;\n\n";

print OUT "//gsoap xmlmime schema import: http://www.w3.org/2004/11/xmlmime\n\n";

#print OUT "struct ns1__Data\n{\n_xop__Include xop__Include;\n@char *xmlmime__contentType;\n};\n";

while(<INP>)
  {
    print OUT;
  }

close INP;
close OUT;
rename("new_grisu_ws.h", "grisu_ws.h") || die "Can't rename grisu_ws.h\n";

return(1);
}

# CURRENT - create a minimal makefile
# NB: can effect a make clean etc etc through perl script
# TODO - GPROF (-pg) -> CFLAGS/LIBS
sub build_makefile
{
open(OUT, ">$makefile") || die;

print OUT "# --- auto generated GDIS makefile\n\n";

# --- variables for determining which source files to include
if ($use_gui)
  {
  print OUT "USE_GUI = YES\n";
  }
else
  {
  print OUT "USE_GUI = NO\n";
  }
if ($use_grisu)
  {
  print OUT "USE_GRISU = YES\n";
  }
else
  {
  print OUT "USE_GRISU = NO\n";
  }
if ($use_python)
  {
  print OUT "USE_PYTHON = YES\n";
  }
else
  {
  print OUT "USE_PYTHON = NO\n";
  }


# TODO - pass OS as argument
print OUT "include $_[0]\n";
print OUT "include makefile.src\n\n";

$cflags="";
$incs="";
$libs="";
$static_libs="";

# NEW - another rewrite to try and get a static build working
# NB: pk-config with --static flag doesnt work in general because
# some packages arent configured correctly and will just generate
# a forced --export-dynamic (which completely overrides the
# attempt at static linking) 
# It seems to work better if we explicitly use 
# -Wl,-Bstatic ... and then -Wl,-Bdynamic (IN THAT ORDER!) for the
# libs we know can be compiled statically, and those that must be dynamic
$get_cflags = "pkg-config --cflags";
$get_libs = "pkg-config --libs";

if ($use_gui)
  {
  $cflags .= " -DWITH_GUI ";
  $get_cflags .= " gtk+-2.0 gthread-2.0 gtkglext-1.0";

  if ($static)
    {
# static part
    $static_libs .= "-lgtkglext-x11-1.0 -lgdkglext-x11-1.0";
#    $libs .= "-Wl,-Bstatic -lgtkglext-x11-1.0 -lgdkglext-x11-1.0 -Wl,-Bdynamic ";
# dynamic part
    $get_libs .= " gtk+-2.0 gthread-2.0 pangox xmu glu"; 
    }
  else
    {
# plain (full dynamic) link
    $get_libs .= " gtk+-2.0 gthread-2.0 gtkglext-1.0"; 
    }
  }
else
  {
  $get_cflags .= " gtk+-2.0 gthread-2.0";
  $get_libs .= " gtk+-2.0 gthread-2.0"; 
  }

if ($use_grisu)
  {
  $cflags .= " -DWITH_GRISU -DWITH_OPENSSL -DWITH_COOKIES ";
  $get_cflags .= " libssl";

  if ($static)
    {
#    $static_libs .= " -lssl -lcrypto -ldl -lz";
    $static_libs .= " -lssl -lcrypto ";
    }
  else
    {
    $get_libs .= " libssl";
    }
  }

# build the cflags string
$get_cflags .= " |";
open(INP, $get_cflags);
$_ = <INP>;
chomp;
$cflags .= $_;
close(INP);

# build libs string
if ($static)
  {
  $libs = "-Wl,-Bstatic ".$static_libs." -Wl,-Bdynamic ";
  }

$get_libs .= " |";
open(INP, $get_libs);
$_ = <INP>;
chomp;
$libs .= $_;
close(INP);

# python/jni stuff not really used 
if ($use_python)
  {
  $cflags .= "-DWITH_PYTHON ";
  }

# NEW - hack for windows - force the lib inclusion
if ($_[0] eq "makefile.win32")
  {
  $libs .= " -lz"
  }

# NEW - hack for JNI
if ($use_java)
  {
  if ($jdk)
    {
    $cflags .= "-I$jdk/include -I$jdk/include/linux";
    $libs .= "-L$jdk/jre/lib/i386/server -ljvm";
    }
  else
    {
    print "Warning: attempting to compile with JNI, yet \$JDK_HOME not set\n";
    }
  }

# python env
if ($use_python)
  {
  open(INP, "python-config --includes |");
  $_ = <INP>;
  chomp;
  $cflags .= $_;
  close(INP);

  open(INP, "python-config --libs |");
  $_ = <INP>;
  chomp;
  $libs .= $_;
  }

print OUT "CFLAGS := \$(CFLAGS) $cflags\n";
print OUT "INCS := \$(INCS) $incs\n";
print OUT "LIBS := \$(LIBS) $libs\n\n";

print OUT "OBJ = \$(SRC:.c=.o)\n\n";

print OUT "$executable: \$(OBJ)\n";
print OUT "\t\$(CC) \$(OBJ) \$(LDFLAGS) -o $executable \$(LIBS)\n";

print OUT ".c.o:\n";
print OUT "\t\$(CC) \$(CFLAGS) -c \$< \$(INCS)\n";

# NEW - clean/tgz/etc targets
print OUT "\ninclude makefile.other\n";

close(OUT);
}
